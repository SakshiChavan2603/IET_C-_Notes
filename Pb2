Perfect üëç Here‚Äôs your Gradebook program properly formatted with clean indentation and spacing for better readability:

#include <iostream>
#include <fstream>
#include <vector>
#include <stdexcept>
using namespace std;

// ---------------- Student Class ----------------
class Student {
public:
    int rollNo;
    string name;
    int marks[3]; // marks in 3 subjects

    Student(int r = 0, string n = "", int m1 = 0, int m2 = 0, int m3 = 0) {
        if (m1 < 0 || m1 > 100 || m2 < 0 || m2 > 100 || m3 < 0 || m3 > 100)
            throw invalid_argument("Marks must be between 0 and 100!");
        rollNo = r;
        name = n;
        marks[0] = m1;
        marks[1] = m2;
        marks[2] = m3;
    }

    double average() const {
        return (marks[0] + marks[1] + marks[2]) / 3.0;
    }

    // Overload ++ to give bonus marks (+1 to each subject, max 100)
    Student& operator++() {
        for (int i = 0; i < 3; i++) {
            if (marks[i] < 100) marks[i]++;
        }
        return *this;
    }

    // Overload > to compare by average marks
    bool operator>(const Student &s) const {
        return this->average() > s.average();
    }
};

// ---------------- Gradebook Class ----------------
class Gradebook {
private:
    vector<Student> students;

public:
    // Add new student
    void addStudent(const Student &s) {
        // Check for duplicate rollNo
        for (Student &st : students) {
            if (st.rollNo == s.rollNo)
                throw runtime_error("Duplicate Roll Number not allowed!");
        }
        students.push_back(s);
    }

    // Display all students
    void displayAll() {
        if (students.empty())
            throw runtime_error("Gradebook is empty!");

        cout << "\n=== Student Records ===\n";
        for (Student &s : students) {
            cout << "Roll: " << s.rollNo
                 << ", Name: " << s.name
                 << ", Marks: " << s.marks[0] << " " << s.marks[1] << " " << s.marks[2]
                 << ", Avg: " << s.average() << endl;
        }
    }

    // Save to file
    void saveToFile() {
        ofstream fout("gradebook.txt", ios::app);
        if (!fout) {
            cerr << "Error opening file!\n";
            return;
        }

        for (Student &s : students) {
            fout << s.rollNo << " " << s.name << " "
                 << s.marks[0] << " " << s.marks[1] << " " << s.marks[2] << "\n";
        }
        fout << "-------------------\n";
        fout.close();
    }

    // Load from file
    void loadFromFile() {
        ifstream fin("gradebook.txt");
        if (!fin) return;

        cout << "Previous Records:\n";
        string line;
        while (getline(fin, line)) {
            cout << line << endl;
        }
        cout << "====================\n";
        fin.close();
    }

    // Search by roll number
    Student* search(int roll) {
        for (Student &s : students) {
            if (s.rollNo == roll) return &s;
        }
        return nullptr;
    }
};

// ---------------- Main Function ----------------
int main() {
    try {
        Gradebook gb;
        gb.loadFromFile();

        int n;
        cout << "Enter number of students to add: ";
        cin >> n;

        for (int i = 0; i < n; i++) {
            int roll, m1, m2, m3;
            string name;
            cout << "Enter RollNo, Name, 3 Marks: ";
            cin >> roll >> name >> m1 >> m2 >> m3;
            gb.addStudent(Student(roll, name, m1, m2, m3));
        }

        gb.displayAll();

        // Search & update
        int r;
        cout << "\nEnter roll number to search: ";
        cin >> r;

        Student* s = gb.search(r);
        if (s) {
            cout << "Found: " << s->name << ", Avg: " << s->average() << endl;
            cout << "Giving bonus marks (++ operator)...\n";
            ++(*s);
            cout << "New Avg: " << s->average() << endl;
        } else {
            cout << "Student not found!\n";
        }

        gb.saveToFile();

    } catch (exception &e) {
        cerr << "Error: " << e.what() << endl;
    }

    return 0;
}

‚ú® This is now clean and consistent just like your previous billing system code.

Do you want me to also add step-by-step inline comments (like explanation for each class, function, and operator) so you can use it directly for your viva/presentation?

